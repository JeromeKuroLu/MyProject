/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.
 What is the value of the first triangle number to have over five hundred divisors?
 */

function getTriangularNumbersByDivisorNum(divisorNum) {
    if (divisorNum < 1) {
        console.log("Can't find that Triangular number, please input positive number.");
    }
    else {
        let triangularNumArray = [],
            triGroupObj = {},
            divisorCount = 1;
        for (let i = 1; divisorCount <= divisorNum; i++) {
            let triangularNum = (i + 1) * i / 2,
                divisorArray = getDivisors(triangularNum);
            if (divisorArray.length > divisorNum) {
                triGroupObj[divisorCount] = triangularNumArray;
                break;
            }
            triangularNumArray.push(triangularNum);
            if (divisorCount < divisorArray.length) {
                triGroupObj[divisorCount] = triangularNumArray;
                triangularNumArray = [];
                divisorCount = divisorArray.length;
            }
        }
        console.log("The Triangular numbers has " + divisorNum + " divisors are: " + triGroupObj[divisorCount]);
        return triGroupObj;
    }
}

function getTriangularNumbersOverDivisorNum(divisorNum) {
    if (divisorNum < 1) {
        console.log("Can't find that Triangular number, please input positive number.");
    }
    else {
        let triangularNumArray = [],
            triGroupObj = {},
            divisorCount = 1;
        for (let i = 1; divisorCount <= divisorNum; i++) {
            let triangularNum = (i + 1) * i / 2,
                divisorArray = getDivisors(triangularNum);
            if (divisorArray.length > divisorNum) {
                triGroupObj[divisorCount] = triangularNumArray;
                divisorCount = divisorArray.length;
                triGroupObj[divisorCount] = triangularNum;
                break;
            }
            triangularNumArray.push(triangularNum);
            if (divisorCount < divisorArray.length) {
                triGroupObj[divisorCount] = triangularNumArray;
                triangularNumArray = [];
                divisorCount = divisorArray.length;
            }
        }
        console.log("The first Triangular number has over " + divisorNum + " divisors is: " + triGroupObj[divisorCount]);
        return triGroupObj;
    }
}

function getDivisors(num) {
    let d1 = 1,
        d2 = num,
        divisorsArray = [];
    while (true) {
        if (d2 < d1) {
            break;
        }
        if (Math.floor(d2) === d2) {
            if (d1 < d2) {
                divisorsArray.push(d1);
                divisorsArray.push(d2);
            }
            else if (d1 === d2) {
                divisorsArray.push(d1);
                break;
            }
        }
        d1++;
        d2 = num / d1;
    }
    return divisorsArray;
}

(function () {
    getTriangularNumbersByDivisorNum(4);
    getTriangularNumbersOverDivisorNum(500);
}());